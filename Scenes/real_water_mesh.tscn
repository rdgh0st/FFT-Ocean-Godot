[gd_scene load_steps=10 format=3 uid="uid://cqngij1fao0xv"]

[sub_resource type="QuadMesh" id="QuadMesh_73lkc"]
subdivide_width = 200
subdivide_depth = 200
orientation = 1

[sub_resource type="Shader" id="Shader_ytl38"]
code = "shader_type spatial;

uniform sampler2D DEPTH_TEXTURE : hint_depth_texture, filter_linear_mipmap;
uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

uniform vec3 albedo : source_color;
uniform vec3 albedo2 : source_color;
uniform float metallic : hint_range(0.0, 1.0) = 0;
uniform float roughness : hint_range(0.0, 1.0) = 0.02;
uniform sampler2D texture_normal;
uniform sampler2D texture_normal2;
uniform sampler2D wave;
uniform vec2 wave_direction = vec2(2.0, 0.0);
uniform vec2 wave_direction2 = vec2(0.0, 1.0);
uniform float time_scale : hint_range(0.0, 0.2, 0.005) = 0.025;
uniform float wave_speed = 2.0;
uniform float noise_scale = 10.0;
uniform float height_scale = 0.15;
uniform float wave_time = 0;

uniform vec4 color_deep : source_color;
uniform vec4 color_shallow : source_color;
uniform float beers_law = 2.0;
uniform float depth_offset = -0.75;

uniform float edge_scale = 0.1;
uniform float near = 1.0;
uniform float far = 100.0;
uniform vec4 edge_color : source_color;

varying float height;
varying vec3 world_pos;


float fresnel(float amount, vec3 normal, vec3 view) {
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0)), amount);
}

float edge(float depth) {
	depth = 2.0 * depth - 1.0;
	return near * far / (far + depth * (near - far));
}

void vertex() {
	world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	height = texture(wave, world_pos.xz / noise_scale + wave_time * time_scale).r;
	VERTEX.y += height * height_scale;
}

void fragment() {
	float depth_texture = texture(DEPTH_TEXTURE, SCREEN_UV).r * 2.0 - 1.0;
	float depth = PROJECTION_MATRIX[3][2] / (depth_texture + PROJECTION_MATRIX[2][2]);
	float depth_blend = exp((depth + VERTEX.z + depth_offset) * -beers_law);
	depth_blend = clamp(1.0 - depth_blend, 0.0, 1.0);
	float depth_blend_power = clamp(pow(depth_blend, 2.5), 0.0, 1.0);
	
	vec3 screen_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, depth_blend_power * 2.5).rgb;
	vec3 depth_color = mix(color_shallow.rgb, color_deep.rgb, depth_blend_power);
	vec3 color = mix(screen_color * depth_color, depth_color * 0.25, depth_blend_power * 0.5);
	
	float z_depth = edge(texture(DEPTH_TEXTURE, SCREEN_UV).x);
	float z_pos = edge(FRAGCOORD.z);
	float z_diff = z_depth - z_pos;
	
	vec2 time = (TIME * wave_direction) * time_scale;
	vec2 time2 = (TIME * wave_direction2) * time_scale;
	
	vec3 normal_blend = mix(texture(texture_normal, world_pos.xz + time).rgb, texture(texture_normal2, world_pos.xz + time2).rgb, 0.5);
	
	float fresnel = fresnel(5.0, NORMAL, VIEW);
	vec3 surface_color = mix(albedo, albedo2, fresnel);
	vec3 depth_color_adj = mix(edge_color.rgb, color, step(edge_scale, z_diff));
	
	ALBEDO = clamp(surface_color + depth_color_adj, vec3(0.0), vec3(1.0));
	METALLIC = metallic;
	ROUGHNESS = roughness;
	NORMAL_MAP = normal_blend;
}
"
metadata/_edit_res_path = "res://Shaders/realistic_water.gdshader"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_82e6d"]
noise_type = 3
fractal_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5jgf7"]
seamless = true
as_normal_map = true
bump_strength = 1.5
noise = SubResource("FastNoiseLite_82e6d")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_lkmvr"]
noise_type = 3
seed = 5
fractal_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_e35na"]
seamless = true
as_normal_map = true
bump_strength = 1.5
noise = SubResource("FastNoiseLite_lkmvr")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_l3hlv"]
noise_type = 3
seed = 10
fractal_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_7eom4"]
seamless = true
noise = SubResource("FastNoiseLite_l3hlv")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_oa52t"]
render_priority = 0
shader = SubResource("Shader_ytl38")
shader_parameter/albedo = Color(0, 0.333333, 0.533333, 1)
shader_parameter/albedo2 = Color(0, 0.709804, 0.717647, 1)
shader_parameter/metallic = 0.0
shader_parameter/roughness = 0.02
shader_parameter/wave_direction = Vector2(2, 0)
shader_parameter/wave_direction2 = Vector2(1, 0)
shader_parameter/time_scale = 0.05
shader_parameter/wave_speed = 1.0
shader_parameter/noise_scale = 10.0
shader_parameter/height_scale = 0.4
shader_parameter/wave_time = 0.0
shader_parameter/color_deep = Color(0.0784314, 0.2, 0.8, 1)
shader_parameter/color_shallow = Color(0, 0.47451, 1, 1)
shader_parameter/beers_law = 0.09
shader_parameter/depth_offset = -0.75
shader_parameter/edge_scale = 1.0
shader_parameter/near = 1.0
shader_parameter/far = 100.0
shader_parameter/edge_color = Color(1, 1, 1, 1)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_5jgf7")
shader_parameter/texture_normal2 = SubResource("NoiseTexture2D_e35na")
shader_parameter/wave = SubResource("NoiseTexture2D_7eom4")

[node name="Water" type="MeshInstance3D"]
cast_shadow = 0
mesh = SubResource("QuadMesh_73lkc")
surface_material_override/0 = SubResource("ShaderMaterial_oa52t")
